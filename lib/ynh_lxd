#!/bin/bash

#=================================================
# LXD HELPERS
#=================================================

# Stopping an LXC container
#
# usage: ynh_lxc_stop --name=name
# | arg: -n, --name=	- name of the LXC
#
# Requires YunoHost version *.*.* or higher.
ynh_lxc_stop () {
	# Declare an array to define the options of this helper.
	local legacy_args=n
	local -A args_array=([n]=name=)
	local name
	# Manage arguments with getopts
	ynh_handle_getopts_args "$@"

	# (We also use timeout 30 in front of the command because sometime lxc
	# commands can hang forever despite the --timeout >_>...)
	timeout 30 lxc stop --timeout 15 $name 2>/dev/null

	# If the command times out, then add the option --force
	if [ $? -eq 124 ]; then
		timeout 30 lxc stop --timeout 15 $name --force 2>/dev/null
	fi
}

# Run a command inside an LXC container
#
# usage: ynh_lxc_run_inside --name=name --command=command
# | arg: -n, --name=		- name of the LXC
# | arg: -c, --command=		- command to execute
#
# Requires YunoHost version *.*.* or higher.
ynh_lxc_run_inside () {
	# Declare an array to define the options of this helper.
	local legacy_args=nc
	local -A args_array=([n]=name= [c]=command=)
	local name
	local command
	# Manage arguments with getopts
	ynh_handle_getopts_args "$@"

	lxc exec $name -- /bin/bash -c "$command"
}

# Restart a container
#
# usage: _ynh_lxc_restart_container --name=name
# | arg: -n, --name=	- name of the LXC
#
# Requires YunoHost version *.*.* or higher.
_ynh_lxc_restart_container () {
	# Declare an array to define the options of this helper.
	local legacy_args=n
	local -A args_array=([n]=name=)
	local name
	# Manage arguments with getopts
	ynh_handle_getopts_args "$@"

	ynh_lxc_stop --name=$name
	lxc start "$name"
}

# Keep sure the LXC is started
#
# usage: _ynh_lxc_start_and_wait --name=name
# | arg: -n, --name=	- name of the LXC
#
# Requires YunoHost version *.*.* or higher.
_ynh_lxc_start_and_wait () {
	# Declare an array to define the options of this helper.
	local legacy_args=n
	local -A args_array=([n]=name=)
	local name
	# Manage arguments with getopts
	ynh_handle_getopts_args "$@"

	# Try to start the container 3 times.
	local max_try=3
	local i=0
	while [ $i -lt $max_try ]
	do
		i=$(( i +1 ))
		local failstart=0

		# Wait for container to start, we are using systemd to check this,
		# for the sake of brevity.
		for j in $(seq 1 10); do
			if lxc exec "$name" -- systemctl isolate multi-user.target >/dev/null 2>/dev/null; then
				break
			fi

			if [ "$j" == "10" ]; then
				log_debug 'Failed to start the container ... restarting ...'
				failstart=1

				_ynh_lxc_restart_container --name="$name"
			fi

			sleep 1s
		done

		# Wait for container to access the internet
		for j in $(seq 1 10); do
			if lxc exec "$name" -- curl -s http://wikipedia.org > /dev/null 2>/dev/null; then
				break
			fi

			if [ "$j" == "10" ]; then
				log_debug 'Failed to access the internet ... restarting'
				failstart=1

				_ynh_lxc_restart_container --name="$name"
			fi

			sleep 1s
		done

		# Has started and has access to the internet
		if [ $failstart -eq 0 ]
		then
			break
		fi

		# Fail if the container failed to start
		if [ $i -eq $max_try ] && [ $failstart -eq 1 ]
		then
			log_error "The container miserably failed to start or to connect to the internet"
			lxc info --show-log $name
			return 1
		fi
	done

	LXC_IP=$(lxc exec $name -- hostname -I | cut -d' ' -f1 | grep -E -o "\<[0-9.]{8,}\>")
}

# Clean the swapfiles of an LXC container
#
# usage: ynh_lxc_swapfiles_clean --name=name
# | arg: -n, --name=	- name of the LXC
#
# Requires YunoHost version *.*.* or higher.
ynh_lxc_swapfiles_clean () {
	# Declare an array to define the options of this helper.
	local legacy_args=n
	local -A args_array=([n]=name=)
	local name
	# Manage arguments with getopts
	ynh_handle_getopts_args "$@"

	# Restart it if needed
	if [ "$(lxc info $name | grep Status | awk '{print tolower($2)}')" != "running" ]; then
		lxc start $name
		_ynh_lxc_start_and_wait --name=$name
	fi
	lxc exec $name -- bash -c 'for swapfile in $(ls /swap_* 2>/dev/null); do swapoff $swapfile; done'
	lxc exec $name -- bash -c 'for swapfile in $(ls /swap_* 2>/dev/null); do rm -f $swapfile; done'
}

# Check if a snapshot exist for an LXC container
#
# usage: ynh_lxc_snapshot_exists --name=name --snapname=snapname
# | arg: -n, --name=		- name of the LXC
# | arg: -s, --snapname=	- name of the snapshot
#
# Requires YunoHost version *.*.* or higher.
ynh_lxc_snapshot_exists () {
	# Declare an array to define the options of this helper.
	local legacy_args=ns
	local -A args_array=([n]=name= [s]=snapname=)
	local name
	local snapname
	# Manage arguments with getopts
	ynh_handle_getopts_args "$@"

	lxc list --format json | jq -e --arg name $name --arg snapname $snapname '.[] | select(.name==$name) | .snapshots[] | select(.name==$snapname)' >/dev/null
}

# Load a snapshot of an LXC container
#
# usage: ynh_lxc_snapshot_load --name=name --snapname=snapname
# | arg: -n, --name=		- name of the LXC
# | arg: -s, --snapname=	- name of the snapshot
#
# Requires YunoHost version *.*.* or higher.
ynh_lxc_snapshot_load () {
	# Declare an array to define the options of this helper.
	local legacy_args=ns
	local -A args_array=([n]=name= [s]=snapname=)
	local name
	local snapname
	# Manage arguments with getopts
	ynh_handle_getopts_args "$@"

	log_debug "Loading snapshot $snapname ..."

	# Remove swap files before restoring the snapshot.
	ynh_lxc_swapfiles_clean --name=$name

	ynh_lxc_stop --name=$name

	lxc restore $name $snapname
	lxc start $name
	_ynh_lxc_start_and_wait --name=$name
}

# Reset an LXC container
#
# usage: ynh_lxc_reset --name=name
# | arg: -n, --name=	- name of the LXC
#
# Requires YunoHost version *.*.* or higher.
ynh_lxc_reset () {
	# Declare an array to define the options of this helper.
	local legacy_args=n
	local -A args_array=([n]=name=)
	local name
	# Manage arguments with getopts
	ynh_handle_getopts_args "$@"

	# If the container exists
	if lxc info $name >/dev/null 2>/dev/null; then
		# Remove swap files before deletting the continer
		ynh_lxc_swapfiles_clean --name=$name
	fi 

	ynh_lxc_stop --name=$name

	if lxc info $name >/dev/null 2>/dev/null; then
		local current_storage=$(lxc list $name --format json --columns b | jq '.[].expanded_devices.root.pool')
		swapoff "$(lxc storage get $current_storage source)/containers/$name/rootfs/swap" 2>/dev/null
	fi 

	lxc delete $name --force 2>/dev/null
}
